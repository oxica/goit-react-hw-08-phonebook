{"version":3,"file":"static/js/684.9a30d696.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AuthForm/RegisterForm.module.css?3956","components/AuthForm/AuthForm.js","views/RegisterView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"RegisterForm_img__CALgW\",\"inputThumb\":\"RegisterForm_inputThumb__poMUP\",\"input\":\"RegisterForm_input__neyXp\",\"inputText\":\"RegisterForm_inputText__85-aF\",\"buttonActive\":\"RegisterForm_buttonActive__rLpVJ\",\"helpfulText\":\"RegisterForm_helpfulText__fhBtO\"};","import { Formik, Form, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box, Typography } from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport Button from '@mui/material/Button';\nimport { register, login } from 'redux/auth/authOperations';\nimport style from './RegisterForm.module.css';\n\nconst validateName = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (/^[A-Za-z]+$/.test(value)) {\n    error = 'Invalid name';\n  }\n  return error;\n};\n\nconst validateEmail = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst validatePassword = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  }\n  if (value.length < 7) {\n    error = 'Password to short';\n  }\n  return error;\n};\n\nexport const AuthForm = ({ title }) => {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState({\n    showPassword: false,\n  });\n\n  const handleClickShowPassword = () => {\n    setValue({\n      ...value,\n      showPassword: !value.showPassword,\n    });\n  };\n\n  const handleSubmit = (name, email, password) => {\n    title === 'Register'\n      ? dispatch(register({ name, email, password }))\n      : dispatch(login({ email, password }));\n  };\n\n  return (\n    <div className={style.img}>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Typography\n          style={{\n            fontSize: '35px',\n            fontWeight: 'bold',\n            lineHeight: '2.8',\n            marginBottom: '40px',\n          }}\n          variant=\"h2\"\n        >\n          {title}\n        </Typography>\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n            name: '',\n            showPassword: false,\n          }}\n          onSubmit={(values, { resetForm }) => {\n            handleSubmit(values.name, values.email, values.password);\n            resetForm();\n          }}\n        >\n          {({ errors, touched, values }) => {\n            const password = values.password.length >= 7;\n\n            return (\n              <Form>\n                {title === 'Register' ? (\n                  <Box className={style.inputThumb}>\n                    <Typography variant=\"caption\" className={style.inputText}>\n                      Name\n                    </Typography>\n                    <Field\n                      className={style.input}\n                      name=\"name\"\n                      type=\"text\"\n                      validate={validateName}\n                    />\n                    {errors.name && touched.name && (\n                      <Typography\n                        variant=\"subtitle1\"\n                        className={style.helpfulText}\n                      >\n                        {errors.name}\n                      </Typography>\n                    )}\n                  </Box>\n                ) : null}\n                <Box className={style.inputThumb}>\n                  <Typography variant=\"caption\" className={style.inputText}>\n                    Email\n                  </Typography>\n                  <Field\n                    className={style.input}\n                    name=\"email\"\n                    type=\"email\"\n                    validate={validateEmail}\n                  />\n                  {errors.email && touched.email && (\n                    <Typography\n                      variant=\"subtitle1\"\n                      className={style.helpfulText}\n                    >\n                      {errors.email}\n                    </Typography>\n                  )}\n                </Box>\n                <Box className={style.inputThumb}>\n                  <Typography variant=\"caption\" className={style.inputText}>\n                    Password\n                  </Typography>\n                  <Field\n                    className={style.input}\n                    type={value.showPassword ? 'text' : 'password'}\n                    name=\"password\"\n                    validate={validatePassword}\n                  />\n                  <IconButton\n                    style={{\n                      width: '24px',\n                      height: '24px',\n                      position: 'absolute',\n                      top: '17px',\n                      right: '7px',\n                    }}\n                    size=\"small\"\n                    type=\"button\"\n                    onClick={handleClickShowPassword}\n                  >\n                    {value.showPassword ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                  {errors.password && touched.password && (\n                    <Typography\n                      variant=\"subtitle1\"\n                      className={style.helpfulText}\n                    >\n                      {errors.password}\n                    </Typography>\n                  )}\n                </Box>\n\n                <Button\n                  fullWidth={true}\n                  color=\"primary\"\n                  type=\"submit\"\n                  disabled={!!errors.email || !password}\n                >\n                  {title === 'Register' ? 'Register' : 'Login'}\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Box>\n    </div>\n  );\n};\n\nAuthForm.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { AuthForm } from '../components/AuthForm/AuthForm';\n\nconst RegisterView = () => <AuthForm title={'Register'} />;\n\nexport default RegisterView;\n"],"names":["validateName","value","error","test","validateEmail","validatePassword","length","AuthForm","title","dispatch","useDispatch","useState","showPassword","setValue","handleClickShowPassword","className","style","Box","display","flexDirection","justifyContent","alignItems","Typography","fontSize","fontWeight","lineHeight","marginBottom","variant","initialValues","email","password","name","onSubmit","values","resetForm","register","login","errors","touched","type","validate","IconButton","width","height","position","top","right","size","onClick","VisibilityOff","Visibility","Button","fullWidth","color","disabled"],"sourceRoot":""}